# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BItDcFYVTGrkdNfX38PG7K9BhJd1dn0z
"""

!pip install -q spacy scikit-learn
!python -m spacy download en_core_web_sm

import spacy
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load spaCy model
nlp = spacy.load("en_core_web_sm")

# Sample FAQs
faqs = [
    {"question": "What is your return policy?", "answer": "You can return any product within 30 days of purchase."},
    {"question": "How do I track my order?", "answer": "Go to your orders page and click on 'Track Order'."},
    {"question": "Do you offer international shipping?", "answer": "Yes, we ship to over 50 countries worldwide."},
    {"question": "How can I contact customer support?", "answer": "You can email us at support@example.com."},
    {"question": "What payment methods do you accept?", "answer": "We accept Visa, MasterCard, PayPal, and Apple Pay."}
]

# Preprocess function
def preprocess(text):
    doc = nlp(text.lower())
    return " ".join([token.lemma_ for token in doc if not token.is_stop and not token.is_punct])

# Preprocess questions and build TF-IDF matrix
questions = [preprocess(faq["question"]) for faq in faqs]
vectorizer = TfidfVectorizer()
faq_matrix = vectorizer.fit_transform(questions)

def get_answer(user_input):
    user_processed = preprocess(user_input)
    user_vec = vectorizer.transform([user_processed])
    similarities = cosine_similarity(user_vec, faq_matrix)
    best_match = similarities.argmax()
    confidence = similarities[0][best_match]

    if confidence > 0.3:
        return faqs[best_match]["answer"]
    else:
        return "Sorry, I couldn't understand your question. Please try rephrasing it."

def chatbot():
    print("ðŸ¤– FAQ Chatbot (type 'exit' to quit)")
    while True:
        user_input = input("You: ")
        if user_input.lower() == "exit":
            print("Bot: Goodbye!")
            break
        response = get_answer(user_input)
        print("Bot:", response)

chatbot()